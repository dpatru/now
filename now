#!/usr/local/bin/perl

use strict;
use Getopt::Long qw(GetOptionsFromArray :config require_order bundling);
use Pod::Usage qw(pod2usage);
use Time::Piece;
use Data::Dumper;
use File::HomeDir;
use Time::Seconds;
use Scalar::Util qw(looks_like_number);
use List::Util qw(sum any);
use Carp::Assert qw(assert should);
use Text::ParseWords qw(shellwords);
use List::MoreUtils qw(pairwise);
use File::Basename; # exposes basename and dirname
use List::Flatten; # flat
use feature 'signatures';
use v5.20; # use say and signatures
use feature qw(signatures);
no warnings qw(experimental::signatures);

# Treat a reference to a hash as a tree, insert val 
sub treeInsert ($tree, $val, $path,
		$combine = sub ($x, $y) { $a + $b }){
  my $t = $tree;
  # say "\nInserting value $val into tree " . Dumper($t);
  die "treeInsert: ERROR: path component is empty string."
    if any {$_ eq ''} @$path;
  $t = exists $t->{$_}? $t->{$_}: ($t->{$_} = {})  for (@$path);
  $a = $$t{''}; $b = $val;
  $$t{''} = $combine->($$t{''}, $val);
  # say "Inserted value $val into tree " . Dumper($tree);
};

sub test_treeInsert {
  my ($tree, $val, $add1, $add2) = ({}, 2, { $a + $b + 1}, sub ($j, $h){ $j+$h+2});
  my @path = split ',', "a,b,c";
  treeInsert($tree, 1, \@path);
  treeInsert($tree, 2, \@path, sub ($j, $h){ $j+$h+2});
  treeInsert($tree, 3, \@path, sub { $a + $b + 1});
  my @bad = ("a", "", "c");
  treeInsert($tree, 4, \@bad, sub { $a + $b + 1});
};
  
# Check if we're being called to autocomplete.
my @completion_flags = ( "COMP_LINE", "COMP_POINT", "COMP_KEY", "COMP_TYPE" );
my $in_bash_completion = any { exists $ENV{$_} } @completion_flags;

# Check if there are no arguments. This means we will be printing the last few lines.
my $no_args = @ARGV == 0;

my %opts = (); # program options in global variable
sub saydebug {
  say STDERR "DEBUG: " . (join ' ', @_) if $opts{DEBUG} && !$in_bash_completion;
};
sub myGetOptions {
  # This routine takes an @argv and processes it,
  # stripping the processed options off the array,
  # and setting the appropriate options in %opts.
  my $argv = shift @_;
  my $success = GetOptionsFromArray
    ( $argv, \%opts,
      'h|?', 'help|man', 'version', 'verbose|v',
      'hours', 'minutes', 'hours-minutes',
      'pretty', 'ugly',
      'projects=s',
      'silent|s', 'nobreak', 'breakword=s@',
      'estimates', 'noestimates',
      'e', 'p',
      'sunday', 'monday',
      'DEBUG', 'NODEBUG',
      'samples=i', 'tries=i',
      'resume|r',
      't=i', 'w=i', 'd=i', 'y=i', 'f=s'
    );
    
  sub setOption {
    my ($option, $nooption, $env, $default) = @_;
    if ($opts{$option}) {
      saydebug "$option set by commandline";
      return;
    }
    elsif ( $opts{$nooption} ) {
      $opts{$option} = 0;
      saydebug "$option unset by commandline";
      return;
    }
    elsif ( exists $ENV{$env} ) {
      $opts{$option} = $ENV{$env};
      saydebug "$option set by environment to $ENV{$env}";
    }
    else {
      $opts{$option} = $default;
      saydebug "$option set to $default by default.";
    }
  };
  
  setOption("DEBUG", "NODEBUG", "NOW_DEBUG", 0);
  setOption("silent", "n/a", "NOW_SILENT", 0);
  setOption("estimates", "noestimates", "NOW_ESTIMATES", 0);
  setOption("verbose", "noverbose", "NOW_VERBOSE", 0);
  setOption("sunday", "monday", "NOW_SUNDAY", 0);
  setOption("samples", "n/a", "NOW_SAMPLES", 50);
  setOption("tries", "n/a", "NOW_TRIES", 1000);
  setOption("pretty", "ugly", "NOW_PRETTY", 1);
  
  sub setFileOption {
    # not a normal option because we look for the file in multiple
    # places.
    my ($name, $option, $env, @defaults) = @_;
    my $setter;
    if ( exists $opts{$option} ) {
      $setter = "commandline";
      die "now: ERROR: cannot set nowfile to empty string."
	if  $option eq "f";
    }
    elsif ( -e $ENV{$env} ) {
      $setter = "environment";
      $opts{$option} = $ENV{$env};
    }
    else {
      $setter = "default";
      for my $f (@defaults) { # look for existing defaults
	if (-f $f) {
	  $opts{$option} = $f;
	  last;
	}
      }
      if (! $opts{$option}) { # look for existing directory
	if ($name ne "Nowfile") {
	  saydebug "$name not set.";
	  return;
	}
	for my $f (@defaults) { # make new file
	  my ($b, $d) = (basename $f, dirname $f);
	  if (-d $d) {
	    $opts{$option} = $f;
	    last;
	  }
	}
      }
      if (! $opts{$option} ) {
	die "Could not set $name.";
      }
    }
    saydebug "$name set by $setter to $opts{$option}";
  };
  setFileOption("Nowfile", "f", "NOW_FILE",
		( File::HomeDir->my_home . "/Dropbox/.now",
		  File::HomeDir->my_home . "/.now" ));
  setFileOption("Projectfile", "projects", "NOW_PROJECTS",
		( File::HomeDir->my_home . "/Dropbox/.projects.org",
		  File::HomeDir->my_home . "/.projects.org" ));
  sub setBreakword {
    # not a normal option because breakwords are an array and they
    # also get split on commas.
    my @breakwords;
    if ($opts{breakword}) { 
      unshift @breakwords, split / *, */ for @{$opts{breakword}};
      $opts{breakword} = \@breakwords;
      saydebug @breakwords . " breakwords from command line: " . join ',', @breakwords;
      return;
    }
    elsif (exists $ENV{NOW_BREAK_WORD}) {
      if ($ENV{NOW_BREAK_WORD}) {
	@breakwords = split / *, */, $ENV{NOW_BREAK_WORD};
	$opts{breakword} = \@breakwords;
	saydebug @breakwords . " breakwords from environment: " . join ',', @breakwords;
	return;
      }
      else {
	saydebug @breakwords . " breakwords from environment.";
      }
    }
    else {
      @breakwords = ( "break", "stop" );
      $opts{breakword} = \@breakwords;
      saydebug @breakwords . " breakwords as default: " . join ',', @breakwords;
      return;
    }
  };
  setBreakword;

  return $success;
}; # end myGetOptions

sub bash_complete {
  # This is called when this script is used to for bash
  # autocompletion.  It takes as its arguments the arguments passed to
  # the script (command, word, prev_word). It outputs lines to
  # stdout. The following envoronment variables are set:

  # COMP_KEY: The keyboard key that was last pressed to invoke
  # completion, normally 9.

  # COMP_LINE: The complete command line.

  # COMP_POINT: The character index of the curser on the command line.

  # COMP_TYPE: The type of completion: 9->[tab], 63->[tab][tab].

  my($command, $word, $prev_word) = @_;
  # say "0000argv = $command, $word, $prev_word";
  my @dash_options =  ( "-d", "-w", "-y", "-f", "-h", "-e", "-p",);
  my @ddash_options = ( "--help", "--verbose", "--minutes",
			"--hours-minutes", "--samples", "--tries",
			"--projects",
		      );
  if ($prev_word =~/-\w*f$/ || $prev_word =~ /^--projects$/) {
    # trying to set the nowfile
    say for glob "'$word*'";
  }
  elsif ($word eq "-") { say for @dash_options; }
  elsif ($word eq "--") { say for @ddash_options; }
  elsif ($word =~ /^--/) { say for any { /$word/ } @ddash_options; }
  elsif ($word =~ /^-/) { say for any { /$word/ } @dash_options; }
  else { # show tasks
    my $argv = $ENV{COMP_LINE};
    $argv =~ s/^\s*\w+\s*//; # strip first argument (program name)
    my @argv = shellwords(($argv,));
    eval { myGetOptions( \@argv ); };
    die "Can't complete with no nowfile." if !$opts{f} or ! -f $opts{f};
    my $words = join ' ', @argv;
    my $est_in_words = 1 if /^[\d.:]+\s*/;
    # take off leading spaces, estimates, and current word
    $words =~ s/^\s+|^[\d:.]+\s*|$word$//g;
    my $max_lines_to_read = $ENV{NOW_COMPLETION_HISTORY} || 1000;
    my $max_choices = $ENV{NOW_COMPLETION_CHOICES} || 20;
    my $line;
    if (!$opts{resume} && -f $opts{projects} && ($opts{p} || $opts{e})) {
      my $projects = parseProjects($opts{projects});
      for (flat(values %{projectsToTasks($projects)})) {
	if (/^($words($word.*))/) {
	  next if any { /^\s*$1\s*$/ } @{$opts{breakword}};
	  my $result = $2;
	  $result =~ s/^\s+|\s+$//g;
	  say $result;
	} }
      return;
    }
    my $file = File::ReadBackwards->new( "$opts{f}" ) or 
      die "can't read .now file ($opts{f}) $!" ;
    while ( defined( $line = $file->readline )) {
      last if $max_lines_to_read-- <= 0;
      if ($line =~ /^\d\d\d\d-\d\d-\d\d[ T]\d\d:\d\d:\d\d ([\d:.]*)\s*($words($word.*))/) {
	next if any { /^\s*$2\s*$/ } @{$opts{breakword}};
	next if $opts{resume} && !$1 && !$est_in_words;
	last if $max_choices-- <= 0;
	# warn "2 = $2, 3 = $3";
	my $result = $3;
	$result =~ s/^\s+|\s+$//g;
	say $result;
      }
      else {
	# warn "no match ($words) ($word) for line $line";
      }
  }}
}; # end bash_complete


if ($in_bash_completion) { # called to complete
  # say "in commandline completion . . .";
  my $max_choices = $ENV{NOW_COMPLETION_CHOICES} || 20;
  bash_complete (@ARGV);
  # my @choices = bash_complete (@ARGV);
  # say for @choices[0..$max_choices-1];
  exit(0);
}

myGetOptions(\@ARGV) or pod2usage(2);

pod2usage(-verbose => 1) if $opts{h};
pod2usage(-verbose => 2) if $opts{help};

if ($opts{version}) {
  say "This is now version 1. ";
  exit(0);
}

pod2usage("$0: options t, w, and d accept only non-negative integers.")
  if $opts{t} < 0 || $opts{d} < 0 || $opts{w} < 0;


sub timestamp {
  # Return a times
  my $t = shift @_ || Time::Piece->new;
  return $t->date . ' ' . $t->time;
};
# say timestamp();

sub parseTimestamp { # return a gmtime of timestamp
  use Try::Tiny;
  my $s = shift(@_);
  my $t;
  try {
    $t = Time::Piece->strptime($s, "%Y-%m-%d %T");
    # $t += localtime->tzoffset; # convert to localtime
  } catch {
    say "parseTimestamp: caught error $_";
    return 0;
  };
  # saydebug "\nparseTimestamp($s) = $t = " . timestamp($t) . "\n";
  should($s, timestamp($t));
  return $t;
}

sub toHours {
  my $t = shift @_;
  if ($t =~ /(\d*\.?\d*):(\d*\.?\d*):?(\d*)/) {
    my $h = $1 + $2/60.0 + $3/3600;
    # say "converting h:m:s $t to hours $h";
    return $h;
  }
  return $t;
};

sub parseLine {
  my ($t2, $line) = @_;
  if (my($timestamp, $est, $task) = $line =~ /(\d\d\d\d-\d\d-\d\d \d\d?:\d\d:\d\d)\s*(\d+.?\d*|\.\d+|\d*:\d+:?\d*)?\s+(.*)/) {
    my $t1 = parseTimestamp($timestamp);
    if ($t1) {
      my $et = sprintf("%.2f", ($t2 - $t1)/3600.0);
      $est = toHours $est;
      my @result = ($t1, $et, $est, $task);
      # saydebug "parseline(" . timestamp($t2) . ", $line)->(". (join ', ', @result) . ")";
      return @result;
    }}
  saydebug "parseline(" . join(', ', @_) . ")->()";
  return ();
};

sub formatLine {
  my ($t, $et, $est, $task) = @_;
  sprintf("%s %5.2f %5.2f %s", timestamp($t), $et, $est, $task);
};

sub aref2str($r){
  return $r? sprintf("[%s,%s]", $$r[0], $$r[1]): "null";
};

sub addTimeTuples ($t1, $t2) {
  # say "adding tupples " . aref2str($t1) . " and " . aref2str($t2);
  return $t1 if !$t2;
  return $t2 if !$t1;
  my ($x1, $y1) = @$t1;
  my ($x2, $y2) = @$t2;
  my $r = [($x1 || 0) + ($x2 || 0), ($y1 || 0) + ($y2 || 0)];
  # say "added tupples " . aref2str($t1) . " and " . aref2str($t2) . " = " . aref2str($r) . "\n";
  return $r;
};

sub addToTree {
  # add tuples to a tree ($et is a tuple)
  my ($tree, $et, @categories) = @_;
  # saydebug "addToTree: " . (join ':', @categories) . ": " . (join ', ', @{$et});
  treeInsert($tree, $et, \@categories, \&addTimeTuples);
  return;
  # saydebug "addToTree: " . join ', ', @{$et};
  for (@categories) {
    if (exists $tree->{$_}) {$tree = $tree->{$_};}
    else {$tree = $tree->{$_} = {};}
  }
  if ($tree->{''}) {
    my @a = pairwise { $a + $b } @{$tree->{''}}, @{$et};
    $tree->{''} = \@a;
  }
  else { $tree->{''} = $et; } 
};

my $hourDigits = 8;
sub printHours {
  my $arg = shift @_;
  my ($hours, $est)= @{$arg};
  my $output = '';
  if ($opts{"hours-minutes"}) {
    $output .= sprintf("%${hourDigits}d:%02d", int($hours), ($hours - int($hours))*60.0);
    if ($opts{estimates}) {
      if ($est) {
	$output .= sprintf("/%${hourDigits}d:%02d", int($est), ($est - int($est))*60.0);
      }
      else {
	my $f = $hourDigits + 3;
	$output .= sprintf("/%${f}s", "");
      }
    }
    $output .= " ";
    
  }
  if ($opts{minutes}) {
    my $minuteDigits = $hourDigits + 2;
    my $m = $hours * 60.0;
    $output .= sprintf("%${minuteDigits}.0fm", $hours * 60.0);
    if ($opts{estimates}) {
      if ($est) {
	$output .= sprintf("/%${minuteDigits}.0fm", $est * 60.0);
      }
      else {
	$output .= sprintf("/%${minuteDigits}s ", "");
      }
    }
    $output .= " ";
  }
  if ($opts{hours} or !$output) {
    my $dhourDigits = $hourDigits + 3;
    $output .= sprintf("%${dhourDigits}.2fh", $hours);
    if ($opts{estimates}) {
      if ($est) {
	$output .= sprintf("/%${dhourDigits}.2fh", $est);
      }
      else {
	$output .= sprintf("/%${dhourDigits}s ", "");
      }
    }
    $output .= " ";
  }
  return $output;
}; # end of printHours

sub formatReportTotal {
  my ($t, $et, $task) = @_;
  # say "formatReportTotal($t, $et, $task)";
  return "$t " . printHours($et) . "$task";
};

sub formatReportItem {
  # $t is a string, $et is as printHours expects, $task is a string
  my ($t, $et, $task) = @_;
  # say "formatReportItem($t, $et, $task)";
  return "$t " . printHours($et) . "$task";
};
  
my @output_lines; # this needs to be global, declaring it inside printReport gives scoping errs.
sub printReport {
  my $r = shift @_;
  # saydebug "printReport " . Dumper($r);
  @output_lines = (); # reset output lines
  sub _p {
    # my ($level, $r) = @_;
    my ($prefix, $suffix, $r) = @_;
    @_ = ();
    my $sum = 0;
    my $estsum = 0;
    # saydebug "level = $level: " . Dumper($r);
    my @sorted_keys = reverse sort keys %{ $r };
    for my $k ( @sorted_keys ) {
      if (ref($r->{$k}) eq 'HASH') {
	if (scalar keys %{ $r->{$k} } == 1 and exists $r->{$k}->{''}) {
	  # saydebug "Leaf category, printing hours for $suffix $k";
	  unshift @output_lines, formatReportItem($prefix, $r->{$k}->{''}, "$suffix$k");
	  $sum += ${$r->{$k}->{''}}[0];
	  $estsum += ${$r->{$k}->{''}}[1];
	  # saydebug "constructed leaf: sum = $sum, estsum = $estsum";
	} else {
	  # saydebug "Aggregate category, find totals and print summary for $suffix $k";
	  my $total = _p("$prefix", "$suffix$k: ", $r->{$k});
	  unshift @output_lines, formatReportTotal($prefix, $total, "(total) $suffix$k");
	  $sum += ${$total}[0];
	  $estsum += ${$total}[1];
	  # saydebug "aggregate: sum = $sum, estsum = $estsum";
	}
      } else {
	# saydebug "True leaf, print hours for $suffix $k";
	# my $t = sprintf("%8.2f", $r->{$k});
	unshift @output_lines, formatReportItem($prefix, $r->{$k}, "$suffix$k");
	$sum += ${$r->{$k}}[0];
	$estsum += ${$r->{$k}}[1];
	# saydebug "leaf: sum = $sum, estsum = $estsum";
      }
    }
    return [$sum, $estsum];
  }; # end _p
  # _p(0, $r);
  for my $k (reverse sort keys %{ $r }) {
    my $t = _p($opts{pretty}? "   ": $k, "", $r->{$k});
    unshift @output_lines, "\n$k ". printHours($t) . "(total)";
  }
  say for @output_lines;
};

sub parseProjects ($projectsFilename){
  # return hash of project trees, setting __est__ and __done__ where  and a hash of project-list of
  # estimates, skipping branches that are done.
  my (%tasks, @stack); # $stack[0] will hold the current tree
  @stack = (\%tasks, ); # push and pop from the front (shift)
  open my $projectsFile, '<', "$projectsFilename"
    or die "Could'nt open projects file $projectsFilename}";
  while (<$projectsFile>) {
    if (my ($stars, $done, $task, $est) = /(\*+)( DONE)? (.+?)( \d+[.:]?\d*| \d*[.:]?\d+)?$/) {
      my $lineLevel = length $stars;
      # say "stars = $stars, done = $done, task = $task, est = $est, lineLevel = $lineLevel";
      if ($lineLevel > $#stack+1) { # create a new level of tasks
	# say "$lineLevel > $#stack+1";
	while ($lineLevel > $#stack+1) {
	  my $ref = $stack[0]->{''} || ($stack[0]->{''} = {});
	  unshift @stack, $ref;
	}}
      elsif ($lineLevel < $#stack+1) { # unnest (pop the stack)
	# say "$lineLevel < $#stack+1";
	shift @stack while $lineLevel < $#stack+1;
      }
      die "parseProjects: ERROR: duplicate projects $task" if ${$stack[0]}{$task};
      my $ref = $stack[0]->{$task} = {};
      unshift @stack, $ref;
      $stack[0]->{__est__} += toHours $est if $est;
      $stack[0]->{__done__} = 1 if $done;
      # say Dumper(\%tasks);
    }}
  # say Dumper(\%tasks);
  return \%tasks;
};

sub projectsToEstimates ($projectsRef, $estimatesRef=undef) {
  if (!defined $estimatesRef) {
    my %estimates;
    $estimates{$_} = projectsToEstimates($projectsRef->{$_}, [])
      for (keys %$projectsRef);
    return \%estimates;
  }
  return \@{$estimatesRef} if $projectsRef->{__done__};
  for my $t (keys %$projectsRef) {
    if ($t eq '__est__') {
      push @$estimatesRef, $projectsRef->{__est__};
    }
    elsif (ref($projectsRef->{$t}) eq 'HASH') {
      projectsToEstimates(\%{$projectsRef->{$t}}, \@{$estimatesRef});
    }}
  return \@{$estimatesRef};
};

sub projectsToTasks ($projectsRef, $prefix=undef) {
  if (!defined $prefix) {
    my %tasks;
    $tasks{$_} = projectsToTasks(\%{$projectsRef->{$_}}, "$_")
      for (keys %$projectsRef);
    return \%tasks;
  }
  return [] if $projectsRef->{__done__};
  my @tasks; 
  for my $t (keys %$projectsRef) {
    next if $t eq '__est__';
    if (ref($projectsRef->{$t}) eq 'HASH') {
      my @rec = @{projectsToTasks(\%{$projectsRef->{$t}}, "$prefix: $t")};
      push @tasks, (@rec? @rec: ("$prefix: $t",));
    }}
  
  return @tasks? \@tasks: ["$prefix"];
};


# my $projects = parseProjects(".projects.org");

# say "\n\ncalling projects to estimates";
# my %estimates = %{projectsToEstimates($projects)};
# say Dumper(\%estimates);
# say "\n\ncalling projects to tasks";
# my %tasks = %{projectsToTasks($projects)};
# say Dumper(\%tasks);
# exit(0);


sub getVelocities { # get some velocities to simulate with
  # use the n most recent
  my $n = shift @_ || 1000;
  say "getting $n velocities . . ." if $opts{verbose};
  
  use File::ReadBackwards ;
  # Tied Handle Interface
  my ($t2, $et, $est, $task);
  $t2 = gmtime; $t2 += localtime->tzoffset;
  my @velocities;
  tie *BW, 'File::ReadBackwards', $opts{f} or
    die "can't read .now file ($opts{f}) $!" ;
  while( <BW> ) {
    chomp;
    if (($t2, $et, $est, $task) = parseLine($t2, $_) and $est > 0 and $et > 0) {
      unshift @velocities, $est * 1.0 / $et;
      last if $n-- <= 0;
    }}
  say "got " . ($#velocities + 1) . " velocities" if $opts{verbose};
  return @velocities;
};

sub simulate ($sample, $tries, $estimates, $name=undef){
  # my ($sample, $tries, @estimates) = @_;
  my @te = map {sprintf("%.2f", $_)} @$estimates; # truncated estimates for printing
  print "$name: " if defined $name;
  if (@$estimates > 1) { 
    say "Simulating tasks of " . join(', ', @te). " = " .
      sum(@te) . " total, percentiles . . . ";
  }
  else {
    say  "Simulating task of $te[0], percentiles . . . ";
  }
  my @velocities = getVelocities $sample;
  # say "velocities = " . join ',', @velocities;
  
  my @times;
  my $n = $tries;
  while ($n-- > 0) {
    my $t = 0;
    for (@$estimates) { $t += 1.0 * $_ / $velocities[rand @velocities]; }
    unshift @times, $t;
  }
  say "     5%     15%     25%     35%     45%     55%     65%     75%     85%     95%";
  my $step = $tries / 10.0;
  my @stimes = sort { $a <=> $b } @times;
  say join ' ', map { sprintf("%7.2f", $stimes[$step * ($_ + .5)]) } (0..9);
  say "(based on $#velocities sample estimates and $tries simulations)";
};

if ($opts{e}) { # simulate project
  die "now: ERROR: Can't estimate project with no project file."
    if !$opts{projects};
  my $line = join ' ', @ARGV;
  my %projects = %{parseProjects($opts{projects})};
  my %estimates = %{projectsToEstimates(\%projects)};
  if (! %projects) {
    say STDERR "now: no projects in project file $opts{projects}";
  }
  elsif (! %estimates ) {
    say STDERR "now: no projects to estimate";
  }
  elsif (! any { $#{$_} >= 0 } values(%estimates)) {
    say STDERR "now: no projects can be estimated";
  }
  else {
    my $notfirst = 0;
    for my $projectName (keys %estimates) {
      next if (!($projectName =~ /^$line/));
      my @ests = @{$estimates{$projectName}};
      next if !@ests;
      if ($#ests >= 0) {
	say "" if $notfirst++;
	simulate($opts{samples}, $opts{tries}, \@ests, $projectName);
      } }
    say STDERR "no estimatable projects match $line" if $notfirst == 0;
  } }

if (@ARGV > 0 && !$opts{e}) { # option parser remove options from @ARGV, check what's left
  # say "there are still arguments: " . join ', ', @ARGV;
  if ($opts{resume}){
    say "Resuming an interupted task . . .";

    my (undef, $EST, $TASK, $t1, $t2, $et, $est, $task, $match, $linenumber, $templine);
    $t2 = gmtime; $t2 += localtime->tzoffset;
    $templine = timestamp($t2) . " " . join " ", @ARGV;
    die "Couldn't parse arguments $templine"
      if ! ((undef, undef, $EST, $TASK) = parseLine($t2, $templine));

    saydebug "est = $EST, task = $TASK";
    
    die "New estimate $est must be non-negative." if $EST < 0;
    
    open my $fh, '<', "$opts{f}" or die "Could not open for reading nowfile '$opts{f}' $!";
    my @tasks = reverse <$fh>;

    $linenumber = 0;
    for my $line (@tasks) {
      saydebug "Looking at $line";
      if (($t1, $et, $est, $task) = parseLine($t2, $line)) {
	saydebug "Parsed $line - t1 = $t1, est = $est, task = $task.";
	if ($task eq $TASK) {
	  if (!$EST) {
	    if (!$est || $est <= 0) { die "Found task ($task) but no estimate ($est)."; }
	    $EST = $est;
	  }
	  elsif ($est ne $EST) {
	    warn "Changing original estimate ($est to $EST).";
	  }
	  if ($EST < $et) {
	    die sprintf("New estimate %.02f is less than previous time spent (%.02f).",
			$EST, $et);
	  }
	  $match = 1;
	  last;
	}
	$t2 = $t1;
      }
      $linenumber++;
    }
    die "Could not find a matching task to resume. ($task)" if !$match;
    saydebug "task $task matches at line $linenumber";
    $tasks[$linenumber] = timestamp($t1) . " $et $TASK\n";
    unshift @tasks, sprintf("%s %f %s\n", timestamp, $EST - ($et), $TASK);
    open $fh, '>', "$opts{f}" or die "Could not open for writing nowfile '$opts{f}'";
    print $fh $_ for reverse @tasks;
    close $fh or die "Could not close nowfile '$opts{f}' $!";
    # say "done";
    # say for reverse @tasks;
  } # end resuming case
  elsif ( (grep { looks_like_number($_) or /^\d*:\d*:?\d*$/ } @ARGV) == @ARGV ) { # test lengths
    # say "all args are numbers - Simulate";
    my @hours = map {toHours $_} @ARGV;
    # say join ', ', @hours;
    simulate($opts{samples}, $opts{tries}, \@hours);
  }
  else {
    # say "NOT all args are numbers - Add a task";
    my $task = join ' ', @ARGV; $task =~ s/^\s+|\s+$//g;
    if (!$opts{silent}) {
      say "starting $task";
      if ($task =~ /^([\d.:]+)\s/) { # an estimate was given, simulate
	my $est = toHours $1;
	simulate($opts{samples}, $opts{tries}, [ $est, ]) if $est;
      }
    }
    open(my $fh, '>>', $opts{f}) or die "Could not open file '$opts{f}' $!";
    say $fh timestamp() . " " . $task;
    close $fh;
    
  }
}

if ($no_args) {
  say "The last few tasks are . . .";
  $opts{t}=10;
}


if ($opts{t} || $opts{d} || $opts{w} || $opts{y}) { # print report of tasks
  use File::ReadBackwards ;
  # Tied Handle Interface

  if ($opts{t}) { # task report
    $hourDigits = 2;
    my ($t1, $t2, $et, $est, $task);
    $t2 = gmtime; $t2 += localtime->tzoffset;
    # say "first t2 = $t2 = ". timestamp($t2) if $opts{DEBUG};
    my @output_lines = ();
    tie *BW, 'File::ReadBackwards', $opts{f} or
      die "can't read .now file ($opts{f}) $!" ;
    while( <BW> ) {
      chomp;
      # say "task report processing line: $_" if $opts{DEBUG};
      if (($t1, $et, $est, $task) = parseLine($t2, $_)) {
	# say "task report: " . timestamp($t1) . "=t1=$t1, $et, $est, $task - ". timestamp($t1)  if $opts{DEBUG};
	my $line = formatReportItem(timestamp($t1), [$et,$est], $task);
	$t2 = $t1;
	next if !$opts{nobreak} and grep /^$task$/, @{$opts{breakword}};
	# say $line if $opts{DEBUG};
	unshift @output_lines, $line;
	last if --$opts{t} <= 0;
      }}
    say for @output_lines;
  }

  sub generateReport {
    my ($field, $n) = @_;
    my @processed_lines; # store processed lines here for verbose option
    my %report;
    tie *BW, 'File::ReadBackwards', $opts{f} or
      die "can't read .now file ($opts{f}) $!" ;
    my $t2 = gmtime; $t2 += localtime->tzoffset;
    while( <BW> ) {
      chomp;
      if (my ($nextt2, $et, $est, $task) = parseLine($t2, $_)) {
	if ($opts{verbose}) {
	  unshift @processed_lines, formatLine($t2, $et, $est, $task);
	}
	$t2 = $nextt2;
	# if we're processing a break, skip it.
	next if !$opts{nobreak} and grep /^$task$/, @{$opts{breakword}};
	my $r;
	if (exists $report{$t2->$field}) {
	  $r = $report{$t2->$field};
	  # say $t2->$field . " exists.";
	}
	else {
	  # say $t2->$field . " does not exist.";
	  last if $n-- <= 0;
	  $r = $report{$t2->$field} = {};
	}
	my @categories = split /\s*:+\s*/, $task;
	addToTree( $r, [$et, $est], @categories );
	# say Dumper(\%report);
      }}
    if ($opts{verbose}) {
      say "processed $#processed_lines lines";
      say for @processed_lines;
    }
    # say Dumper(\%report);
    
    printReport(\%report);
  }

  if ($opts{d}) { # daily report
    # say "daily";
    $hourDigits = 2;
    generateReport("date", $opts{d});
  }
  if ($opts{w}) { # weekly report
    # say "weekly";
    $hourDigits = 3;
    generateReport(\&getWeek, $opts{w});
  }
  if ($opts{y}) { # yearly report
    $hourDigits = 4;
    generateReport("year", $opts{y});
  }
};

sub getWeek {
  # http://perldoc.perl.org/Time/Piece.html#Week-Number: The week
  # number may be an unknown concept to some readers. The ISO 8601
  # standard defines that weeks begin on a Monday and week 1 of the
  # year is the week that includes both January 4th and the first
  # Thursday of the year. In other words, if the first Monday of
  # January is the 2nd, 3rd, or 4th, the preceding days of the January
  # are part of the last week of the preceding year. Week numbers
  # range from 1 to 53.
  #
  # Allow the option to start the week on Sunday, but keep the week number the same.
  my $t = shift @_;
  
  # If it's Sunday, then bump up the time to Monday so that the week number is correct.
  my $t2 = $opts{sunday} && $t->_wday == 0? $t + ONE_DAY: $t;

  my $firstday = $opts{sunday}? $t - $t->_wday * ONE_DAY:
  $t->_wday? $t - ($t->_wday - 1)*ONE_DAY:
  $t - 6*ONE_DAY;
  

  my $r = $t2->year . " week " . $t2->week . " beginning " .
    $firstday->wdayname . " " . $firstday->date;
  return $r;
};
      


__END__

=head1 now EXAMPLES

B<now prog: docs>      # Add task "prog: docs" to .now file.

B<now 12 prog: plan>   # Add task "prog: plan" with estimate 12 minutes.

B<now>                 # Print report.

B<now -t 4>            # Print report of the last 4 tasks

B<now -d 4>            # Print report of the last 4 days.

B<now -w 4>            # Print report of the last 4 weeks.

B<now 5>               # Estimate duration of task estimated to be 5 minutes.

B<now 5 10 3>          # Estimate the duration of tasks estimated to be 
                       # 5, 10, and 3 hours.

B<now -r a>            # Resume task a.

B<now -r 5 a>          # Resume task a, changing estimated time to 5hrs.

B<now -e>              # Simulate the projects in the project file.

=head1 SYNOPSIS

sample [options] [file ...]

 Options:
   -h|?              brief help message
   --help | --man    full documentation
   --version         print version and exit
   --verbose | -v    print processed lines before reports
   --hours           print report in hours (default)
   --minutes         print report in minutes instead of hours
   --hours-minutes   print report in hours and minutes
   --nobreak         do not skip breaks
   --breakword stop  use "stop" as the breakword instead of "break".
   --estimates       show estimates when reporting
   --noestimates     turn off estimates when reporting
   --sunday          start the week on sunday for weekly reports
   --monday          start the week on monday (default)
   --samples 1000    number of sample estimates to use for simulation
   --tries 100       number of times to simulate
   -f mynowfile      use now file mynowfile (default is ~/.now)
   -t 5              show 5 tosks
   -d 5              show 5 days
   -w 5              show 5 weeks
   -e                estimate projects from project file
   --projects myfile use myfile as projects file
   -r task           resume from an interuption
   --resume task     resume from an interuption
   --DEBUG           show settings

=head1 OPTIONS

=over 2

=item B<-h>

Print a brief help message and exits.

=item B<--help>

Prints the manual page and exits.

=item B<--breakword stop,quit>

Use "stop" or "quit" as breakwords instead of the default or the
environment-defined breakword.  Multiple words can be defined by
separating with commas or using multiple --breakword options.  The
default breakword is "break".  The default breakword can be set by the
environment variable "NOW_BREAK_WORD".  

Breakwords are used to end a task without starting a new one. Breaks
are normally ignored when reporting. 

=item B<--sunday, --nosunday>

For weekly reporting, the week starts on Monday. According to 
http://perldoc.perl.org/Time/Piece.html#Week-Number: 

=over 2

The week number may be an unknown concept to some readers. The ISO
8601 standard defines that weeks begin on a Monday and week 1 of the
year is the week that includes both January 4th and the first Thursday
of the year. In other words, if the first Monday of January is the
2nd, 3rd, or 4th, the preceding days of the January are part of the
last week of the preceding year. Week numbers range from 1 to 53.

=back

Use the B<--sunday> option to start the week on Sunday for weekly
reports. The number of the week will still follow ISO 8601, but Sunday
will be treated as belonging to the following week (that starts the
next Monday.) This can also be set with the environment variable
NOW_SUNDAY=1.

=item B<--samples 1000, --tries 1000>

When simulating tasks, there are two parameters that can be
adjusted. B<samples> is the number of velocities that are pulled from
the nowfile. (A velocity is the ratio of the estimated time divided
by the actual. A velocity of 1 means that time went as expected. A
velocity of 2 means that task went twice as fast as expected.) The
velocities are taken in reverse order (from the bottom of the
nowfile).

Once the samples are taken, the task is simulated by dividing the
estimates by a randomly chosen velocity. The results are then sorted
and the 5th, 15th, 25th, ..., 95th percentiles are taken. The number
of simulations is the number of B<tries>. To get a more
probabalistically accurate estimate, increase the number of
B<tries>. A smaller B<samples> ignores older velocities.

See https://www.joelonsoftware.com/2007/10/26/evidence-based-scheduling/ for more information.

=item B<--pretty>

Pretty-print reports. Don't print the datetime for every line. This
gives a cleaner look. 

=item B<--ugly>

Ugly-print reports. Print the datetime for every line. This may be
more useful for filling out timesheets as it reduces eye-movement.

=item B<--projects projectfile.org, -p projectfile.org>

Sets the projects file. Should be in org-mode format with (optional)
estimates at the end of headers. This can also be set by environment
variable. By default, projects files are located at
~/Dropbox/.projects.org or ~/.projects.

=item B<-e>

Estimate how long each project in the project file will take. If a project is given, only projects that match will be estimated.

=item B<-p>

Autocomplete from project file and not from now file.

=item B<--resume task, -r task>

Resume a task that has been interupted. This command will try to
rewrite the nowfile to correct an estimate with respect to an
interuption. The goal is to make it easy to recover from an
interuption so that it is recorded. An example should make this clear.

Note that the task name must match exactly. But this is easy to do
with autocomplete.

=over 2

$ B<now 2 a>

$ # work for an hour

$ B<now interuption>

$ B<now -t 2>

xxxx-xx-xx 00:00:00 1hr/3hr a

xxxx-xx-xx 01:00:00 xhr/    interuption

$ B<now -r a; now -t 3>

xxxx-xx-xx 00:00:00 1hr/1hr a

xxxx-xx-xx 01:00:00 xhr/    interuption

xxxx-xx-xx 01:10:00 0hr/2hr a

$ # Note that the first a's estimate was reset to 1hr, the amount
used, while the rest of the estimate was used for the second a. The
interuption did not ruin the estimate.

=back

=item B<--DEBUG>

Print the settings (nowfile, verbose, sunday, ...) to stderr before
running. 


=back

=head1 DESCRIPTION

B<now> is a simple, text-based, shell-based time tracker suitable for
tracking time at the terminal and completing time sheets.  Tasks are
stored in a text file ~/Dropbox/.now or ~/.now.  Tasks are stored in
the .now file, one task per line, prepended by a timestamp and an
optional estimate (in hours). You can easily edit this file by
hand. This utility just makes common tasks easier.

B<now> has three modes of use: 
(1) real-time tracking mode, 
(2) report mode, and 
(3) estimation mode.

=head2 REAL-TIME TRACKING

To use the real-time tracking mode, call B<now> with the task.  The
task will be appended the .now file with the current time.  Call
B<now> with a new task, or a "break" task when the current task is
done.

=over 2

now programming: finish docs # start tracking "programming: docs" now

=back

You can also add an estimate in hours or h:m. 

=over 2

now :10 my task # start tracking "my task" now, estimate 10 minutes

now 2.5 my long task # start tracking "my long task" now, estimate 2.5 hours


=back

=head2 REPORTING

Use the -d, -w, or -t options for report mode. This will print a
report of the last n days, weeks, or tasks respectively. Colons (:)
are used to mark task categories. Reports break down time spent
hierachially in each category and task. The -v or --verbose option
will print the tasks processed before the report.

=head2 ESTIMATING

Calling B<now> with a list of estimates will produce a time range
based on past estimates in the now file. See evidence-based scheduling
and http://www.joelonsoftware.com/items/2007/10/26.html.

=head1 HOW TO USE THIS FOR ESTIMATING

Past estimates are taken from past tasks for which estimates are
given. IT IS ASSUMED THAT TASKS ARE COMPLETED. So once you give an
estimate, strive to complete the task. If you don't complete it, don't
give the estimate, because the estimate will not mean anything. This
may mean that you will have to track very small tasks (with small
estimates) so that you can actually complete them.

For example, if you estimate that task A should take 1 hour, and you
work on it for an hour and thirty minutes and then are interupted and
work on something else without completing task A, then B<now> will
think that you actually completed the task at 150% of your estimate,
when you actually did potentially far worse. Your smulation results
will be off.

In this case, you should have split up your one hour task into samller
tasks of perhaps fifteen minutes. Then you would have had up to an
hour and a half to complete your fifteen-minute task before being
interupted.

To get the most from B<now>, use break up your work into lots of
little tasks with relatively small estimates. When you start a task,
strive to finish it.

=head1 HOW TO INSTALL

Put the B<now> perl file somewhere in your path. Add the following line to your ~/.profile:

=over 2

# call the command now to autocomplete now (now is it's own autocompletor.

complete -C now now 

=back


=head1 CUSTOMIZATION

You can set some options using environment variables. The following is
a sample ~/.profile.

=over 2

# set the .now file to ~/mydir/.now

export NOW_qFILE=~/mydir/.now

# Treat stop, break, quit, and done as breakwords.

export NOW_BREAK_WORD=stop,break,quit,done

# Silent operation

export NOW_SILENT=1

# include estimates in reports.

export NOW_ESTIMATES=1

# Start weeks on Sunday.

export NOW_SUNDAY=1

# Start weeks on Monday.

export NOW_SUNDAY=0

# Set the default samples and tries.

export NOW_SAMPLES=100

export NOW_TRIES=80


# Set number of lines to read from now file when bash completing

export NOW_COMPLETION_HISTORY=1000

# Set the max number of choices to present when bash completing

export NOW_COMPLETION_CHOICES=20

# Set the DEBUG flag (show settings)

export NOW_DEBUG=1

# Set the projects file

export NOW_PROJECTS=~/myprojects.org


=back




=cut
