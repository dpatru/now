* now todo list
** DONE add test framework

** output reports in orgmode format
 - Advantage: could be captured and manipulated with orgmode's collapsing functions.
 - Could be in the same format as projects.

** DONE simulating when adding a task with an estimate 

It might be a good idea to simulate when adding a task with an estimate, to see the range of possible time for completion. It might help give a gaming feel.

** What we should be estimating:
 - how long each task takes
 - how many hours in a day

Joel Spolsky's article on onvidence-based scheduling (https://www.joelonsoftware.com/2007/10/26/evidence-based-scheduling/) 

It seems to me that there are two useful places to estimate: 1) at the task level, to imporve one's own estimating, and 2) at the project level to predict when a proposed project will finish.

And the two are not necessarily related. The now file, at least the way it's conceived of currently, has no concept of a long-term project, that a project is completed. There are just individual tasks with line estimates. 

I think we could do this with an additional project file. Projects could be listed hierachically, and estimates given for each subtask. Then the .now file could be scanned for actual times only and velocities could be computed using estimates in the project files. 

How do we know that projects are done? They can be marked as such. Spolsky has the idea that debugging be charged back to the original projects. This is compatible with marking projects as done: marking a project as done means that it is available for velocities. But time spent can still be computed dynamically.

** implement projects
*** Use -p and -e flags to auto complete from projects. 
-p should just auto complete from projects.
-e should do what -p does, but also estimate the project.
If a project is given along with the -e flag, that project should be estimated.
*** DONE switch indicating project estimation 0:10
*** DONE design project format 0:10
Org mode could be used for project formats.


*** DONE what happens when estimating projects? 0:30
The goal of project estimation is to give an end date range for a project.
Let's not overthink this. So given a project in the form of project names and subtasks with estimates, run simulations for all the estimates in each project and print the distribution for each project. 

There are several ways we can treat projects:

**** Projects are labeled simulations

Where should we get the velocities? from the .now file. This is where you have actual proven data.

Subtasks or projects that are marked DONE will not be used for estimating. 

In this view, projects are just labeled simulations. Estimates in a project are just used for simulation.

**** Projects are real

If you want a real (long-lived) projects file, we can use the projects file for both auto-completion and to calculate actual times for each subtask. 

This complicates things in that the project hierarchy in the .now file may not match the hierarchy in the .projects file. It seems a little contrary to the spirit of `now` to make project files real in the sense of matching tasks in .now.

But the idea of using project files for auto-completion is a good one and could be easily adopted. 


*** DONE implement functionality 1

** DONE interuptions

Interuptions are common. How should they be handled?

This only matters when there is an estimate involved. 
It seems that the estimate should be rewritten, to reflect the fact that there was an interuption. 
However, the fact that there was an interuption can be seen as a failure to plan. It will be reflected in the velocities. 

What could be done is make an easy way to see which projects still have time on them, and allow the user to "resume" by adjusting the estimate and re-inputting the task with the balance of the estimate. This will introduce errors in simulating, but will make the reporting better. 

Proposed: use `now ::` as a way to ask the system for unfinished projects. A list of them could be returned, numbered. Then `now :: [task number]` could be used to resume a job. The estimate on the old entry would be adjusted to match the actual time spent, and the remaining time on the estimate would be used on the new entry. This would track estimations in reports correctly, even when there are interuptions. On the other hand, it would tend to screw up estimating, because there would be more jobs where the estimation matched the time spent, which may not be how you want to treat inteructions, i.e., they would make your velocity record look better than it is. 

The current solution is to ignore the effect of interuptions on estimates. If it bothers the user, then he/she can change them manually. But this is kind of hard, as it probably should be. Verdict: I don't think the system should be changed to accomodate inteructions.

** project folder?

Tasks could be laid out in advance in a projects folder.
This would fit nicely with planning, where projects would be laid out in advance and estimated.

** autocompletion

*** efficient autocompletion
 - You can analyze the existing line, and then only retrieve jobs that could complete it.
 - You can pull jobs from a project file. (but this can be done easily by inputing several short-term jobs or jobs without an estimate, just to get them into the system. That is, you can fake a project file just by entering jobs in the nowfile where autocomplete would find them. This seems more in the spirit of now.

** corrections
*** "compiler"
Mode to go over the nowfile and find anomolies like blank lines or bad formatting.

** comments
Allow comments to be inserted with `now # this is a comment on the current job.`

