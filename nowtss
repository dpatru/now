#!/usr/bin/perl -sln

# Given a list of timestamps and tasks, 
# ts1 [estimate] task1
# ts2 estimate2 task2
# ts3 task3

# We want to print the elapsed times, so that all the information on an entry is on the same line.
# ts1 (ts2-ts1)/est task1
# ts2 (ts3-ts2)/est task2
# ts3 (now-ts3)/est ask3

# est = est (if one is given) | '' (empty space)
BEGIN {
  $t1 = 0;
  $t2 = 0;
  #$line = '';
  sub print_line {
    #print "\n$line";
    if (($date, $time, $est, $task) = $line =~ /([\d\-]+)\s+([\d\:]+)\s+([\d\.]*\s*)\b(.*)$/) {
      #print "date $date, time $time, est $est, task $task";
      my $est = $est eq ''? '': sprintf("%.02f", $est);
      my $act = sprintf("%.02f", ($t2 - $t1) / 3600); 
      #print "t1: $t1; t2: $t2; act: $act";
      print "$date $time $act/$est $task"
    }
  }
}

if (($date, $time, $est, $task) = $_ =~ /([\d\-]+) ([\d\:]+)/) {
  $t2 = `date -jf '%F %T' "$date $time" '+%s' 2> /dev/null`;
  chomp($t2);
  &print_line if $line;
  $t1 = $t2;
  $line = $_;
} 
#else {
#  print "Not in good form: $_\n";
#}

END {
  $t2 = `date -j '+%s' 2> /dev/null`; # use the current time
  chomp($t2);
  &print_line();
}

__END__

sub seconds2timestring {
  my $seconds = $_[0];
  my $hours = int($seconds / 3600);
  my $seconds = $seconds % 3600;
  my $minutes = int($seconds / 60);
  $seconds = $seconds % 60;
  # return sprintf("%d:%02d:%02d", $hours, $minutes, $seconds);
  return sprintf("%d:%02d", $hours, $minutes);
}

sub print_line {
  my $et_seconds = $_[0];
  my $line = $_[1]; 
  my $timestring = seconds2timestring($et_seconds);
  $line =~ s/ - / - ET $timestring - /;
  print $line; #  "ET $et - $_"; 
} 
 
my $t1 = -1;
my $prev_line = ""; 
while (<>) { # do for each line
  my $t2 = `date -jf '%F %T' "$_" '+%s' 2> /dev/null`;
  # if this is the first line, don't print it yet 
  # because we don't yet know the elapsed time
  if ($t1 > 0) { 
    print_line($t2 - $t1, $prev_line);
  }
  $t1 = $t2;
  $prev_line = $_;
}
# print the last line too, relative to the current time
if ($t1 >= 0) {
  my $t2 = `date -j '+%s' 2> /dev/null`; # use the current time
  print_line($t2 - $t1, $prev_line);
}

__END__




